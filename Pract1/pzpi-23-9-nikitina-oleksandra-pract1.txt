Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії


ЗВІТ
до практичного завдання № 1
з дисципліни «Аналіз та рефакторинґ коду»
на тему: «Правила оформлення програмного коду у Java за Oracle Code Conventions »



Виконала
ст. гр. ПЗПІ-23-9
Нікітіна Олександра

Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович


Харків 2025
ЗМІСТ
1 ІСТОРІЯ ЗМІН	4
2 ЗАВДАННЯ	5
3 ОПИС ВИКОНАНОЇ РОБОТИ	6
3.1 Вибір мови програмування	6
3.2 Зміст доповіді	6
3.2.1 Вступ	6
3.2.2 Рекомендація 1. Використовуйте осмислені назви змінних, методів та класів	7
3.2.3 Рекомендація 2. Дотримуйтеся правил найменування за Java Naming Conventions	7
3.2.4 Рекомендація 3. Використовуйте узгоджене форматування	9
3.2.5 Рекомендація 4. Розумійте специфічні (альтернативні) конвенції	10
3.2.6 Рекомендація 5. Використовуйте коментарі помірно і змістовно	11
3.2.7 Рекомендація 6. Використовуйте інструменти для перевірки стилю (Linters)	12
3.2.8 Рекомендація 7. Обробляйте помилки відповідно до стандартів Java	13
3.2.9 Рекомендація 8. Методи мають бути короткими і виконувати одну дію (SRP)	14
3.2.10 Рекомендація 9. Оптимізуйте продуктивність коду осмислено	15
3.2.11 Рекомендація 10. Дотримуйтесь ключових принципів ООП	16
3.2.12 Рекомендація 11. Документуйте код із використанням Javadoc	18
3.2.13 Рекомендація 12. Пишіть тести для перевірки функціональності (Unit Testing)	19
3.2.14 Рекомендація 13. Використовуйте сучасні можливості мови (Java 8+)	20
3.2.15 Рекомендація 14. Один клас – один файл, чітка структура пакетів	21
3.2.16 Рекомендація 15. Використовуйте інструменти та автоматизацію якості коду	21
3.2.17 Висновки	22
4 ВИСНОВКИ	23
5 ВИКОРИСТАНІ ДЖЕРЕЛА	24
ДОДАТОК А Відеозапис	25
ДОДАТОК Б Слайди презентації	26
ДОДАТОК В Програмний код	37




1 ІСТОРІЯ ЗМІН
№ДатаВерсія звітуОпис змін та виправлень122.10.20250.1Створено розділи «Завдання», «Опис виконаної роботи», «Використані джерела»224.10.20250.1Створено розділи «Висновки», «Додаток А», «Додаток Б», «Додаток В»


2 ЗАВДАННЯ
     Студент повинен обрати мову програмування, дослідити основні рекомендації для написання якісного коду у цій мові, продемонструвати ці рекомендації на прикладах коду, обґрунтувати кожну рекомендацію і надати детальні пояснення. Для кожного прикладу мають бути наведені фрагменти коду.


3 ОПИС ВИКОНАНОЇ РОБОТИ
     3.1 Вибір мови програмування
     Для доповіді було обрано мову програмування Java – одну з найпопулярніших та найбільш використовуваних мов у світі. 
     3.2 Зміст доповіді
     3.2.1 Вступ
     Java – це об’єктно-орієнтована мова програмування, яка використовується як для розробки мобільних додатків, так і для великих корпоративних систем. Її ключові особливості – це незалежність від платформи (принцип "Write Once, Run Anywhere" – WORA) завдяки використанню Java Virtual Machine (JVM), а також надійна система типізації та автоматичне керування пам'яттю (Garbage Collection).
     Проєкти на Java часто мають великий обсяг і розробляються командами, що робить дотримання єдиних стандартів кодування (Code Conventions) не просто бажаним, а критично важливим для успіху та довгострокової підтримки. Найбільш впливовим і часто використовуваним стандартом є Oracle Code Conventions for the Java TM Programming Language (або їхні варіації, як-от Google Java Style Guide), а також численні сучасні практики чистого коду (Clean Code, SOLID-принципи тощо).
     Якісний код у Java повинен бути:
• читабельним (Readable);
• підтримуваним (Maintainable);
• тестованим (Testable);
• ефективним (Performant).
     У даній доповіді буде розглянуто ключові рекомендації, які забезпечують ці якості.
     3.2.2 Рекомендація 1. Використовуйте осмислені назви змінних, методів та класів
     Java – строго типізована об’єктно-орієнтована мова, де часто працюють з багатьма класами та методами. Логічне іменування полегшує навігацію по коду та дозволяє швидше зрозуміти його структуру і призначення елементів.
     Тому перша рекомендація – це використовувати осмислені назви змінних, методів та класів.
     Дуже важливо давати їм такі імена, які одразу описують їх призначення і функціональність. Назви повинні бути інтуїтивно зрозумілими та читабельними. Використання скорочень без пояснень чи абревіатур робить код складним для розуміння, особливо для інших розробників або для вас самих через час. 
     Приклад поганого та гарного іменування:
     
1 // Поганий приклад
2 int a = 10;
3 int b = 20;
4 int c = a + b;
5 
6 // Гарний приклад
7 int firstNumber = 10;
8 int secondNumber = 20;
9 int sum = firstNumber + secondNumber;
     
     Якщо назви неінформативні, це веде до плутанини, помилок та ускладнює рефакторинг або розширення коду. При командній роботі це може спричинити довгі обговорення замість швидкого вирішення задач.
     3.2.3 Рекомендація 2. Дотримуйтеся правил найменування за Java Naming Conventions
     У Java існують усталені правила для іменування класів, методів, змінних і констант, які забезпечують єдність стилю та зрозумілість коду.
     Тому дотримуйтеся правил найменування за Java Naming Conventions, а саме:
1) назви класів та інтерфейсів зазвичай пишуться в PascalCase або UpperCamelCase (Кожне нове слово з великої літери); 
2) методи й змінні – в lowerCamelCase (перше слово з малої, наступні – з великої), при цьому методи повинні бути як імперативні дієслова, наприклад, add() як у прикладі, а змінні – короткі, але змістовні. Змінні не повинні починатися з _ або $, навіть якщо синтаксично це дозволено;
3) константи – в UPPER_SNAKE_CASE, тобто усі слова з великої літери та розділяються підкресленням;
4) пакети – всі літери маленькі, слова розділяються крапкою, наприклад, com.mycompany.app.
     Також уникайте «магічних» чисел (Magic Numbers) – це будь-яке число (або рядок) у коді, яке не має очевидного пояснення. Замість того, щоб "жорстко" вказувати числа в логіці, їх слід виносити у змістовні константи (static final). Це робить код читабельним і, що найважливіше, дозволяє легко змінити це значення в одному місці, а не шукати його по всьому коду.
     Приклад поганого та гарного іменування відповідно до правил:
     
1 //Поганий приклад
2 class calculator { // має бути UpperCamelCase
3     final int max_val = 100; // UPPER_SNAKE_CASE
4     public int ADD(int x, int y) { // lowerCamelCase
5         return x + y;
6     }
7 }
8 
9 //Гарний приклад
10 class Calculator {
11     private static final int MAX_VALUE = 100;
12 
13     public int add(int firstOperand, int secondOperand) {
14         return firstOperand + secondOperand;
15     }
16 }
     
     Дотримання цих конвенцій формує єдиний стандарт у команді, спрощує читання коду, а багато інструментів розробки (IDE) розпізнають стиль і підтримують автодоповнення та рефакторинг саме за цими правилами.  Стандартизація імен прискорює роботу над кодом, полегшує інтеграцію нових розробників у проєкт і знижує ризик юридичних структурних помилок.
     3.2.4 Рекомендація 3. Використовуйте узгоджене форматування
     Консистентне форматування коду – це базова умова читабельності. Якщо різні частини проєкту мають різний стиль (використання табуляцій / пробілів, різна глибина відступів, довгі рядки без перенесень), це ускладнює читання та порушує «візуальний потік».
     Рекомендація 3: Використовуйте узгоджене вирівнювання в Java (відступи, пробіли, максимальна довжина рядка).
     У Java-проєктах 4 пробіли для відступу (або табуляція, еквівалентна 4 пробілам) є галузевим стандартом для створення відступів. Це забезпечує єдиний вигляд коду незалежно від редактора чи IDE, які використовують розробники. Проте використання табуляції не рекомендується, оскільки вона може по-різному відображатися в різних редакторах.
     Довжина рядка традиційно не повинна перевищувати 80 символів, але у сучасних проєктах часто беруть ліміт 100–120 символів, аби уникнути «зламаних» кодових ліній. 
     У Java найпоширенішим є стиль «Egyptian Brackets». Відкриваюча дужка { розміщується на тому ж рядку, що й оголошення (класу, методу, умови), а закриваюча } – на окремому рядку, вирівняна з початком оголошення.
     Використання порожніх рядків між логічними блоками (наприклад, між методами, між групами змінних) допомагає структурувати код.
     Уникайте зайвих пробілів, порожніх блоків або «висячих» дужок.
     Приклад поганого і правильного формату:
     
1 // Поганий приклад (змішані відступи, дужки на нових рядках, довгі рядки)
2 public class Calculator
3 {
4     public int add(int firstOperand,int secondOperand) {
5         int sum = firstOperand + secondOperand; System.out.println("Sum = " + sum); } // Дві інструкції на одному рядку
6 // Зайвий пробіл
7 }
8 
9 // Гарний приклад (4 пробіли, "Egyptian Brackets")
10 public class Calculator {
11 
12     public int add(int firstOperand, int secondOperand) {
13         int sum = firstOperand + secondOperand;
14         System.out.println("Sum = " + sum);
15         return sum;
16     }
17 
18     public int subtract(int firstOperand, int secondOperand) {
19         return firstOperand - secondOperand;
20     }
21 }
     
     У неправильному прикладі дві інструкції знаходяться на одному рядку, після методів зайвий пробіл.
     А у правильному прикладі аргументи відокремлені пробілом після коми, дії логічно розбиті на окремі строки, між методами додавання та віднімання порожній рядок, притримується стиль «Egyptian Brackets».
     3.2.5 Рекомендація 4. Розумійте специфічні (альтернативні) конвенції
     Хоча Oracle Code Conventions є класикою, багато сучасних проєктів, особливо ті, що використовують інструменти Google (наприклад, Android), дотримуються Google Java Style Guide. Важливо розуміти ключові відмінності.
     Oracle більш гнучкий, дозволяє різні підходи, наприклад, не регламентує жорстко порядок імпортів.
     Google більш строгий і деталізований, розроблений для максимальної автоматизації та консистентності.
     Приклади відмінностей конвенцій зображені у таблиці 3.1.
     
     Таблиця 3.1 – Ключові відмінності між Oracle Code Conventions та Google Java Style Guide
АспектOracle Code ConventionsGoogle Java Style GuideВідступи4 пробіли2 пробілиДужки ifДозволяє if (a) return;Вимагає дужок: if (a) { return; }ІмпортиНе регламентує порядокЧіткий порядок: com.google.*, com.*, javax.*, java.*, staticЛіміт рядка80-100 символів100 символів (жорстко)     
     Google Style Guide часто обирають, бо він краще підтримується автоматичними форматерами. Головне – обрати один стиль для всього проєкту.
     3.2.6 Рекомендація 5. Використовуйте коментарі помірно і змістовно
     Коментарі повинні пояснювати «чому» прийнято таке рішення, а не «що» робить код (це має бути видно з назв). Уникайте надлишкових коментарів, які дублюють код. В Java використовують однорядкові коментарі // та блочні коментарі /* ... */. Для публічних API і методів рекомендовано застосовувати Javadoc коментарі, які дозволяють автоматично генерувати документацію.
     Приклад погано та добре коментованого коду:
     
1 public class Calculator {
2 
3     // Поганий коментар (очевидний)
4     // Метод для додавання двох чисел
5     public int add(int firstOperand, int secondOperand) {
6         // Повертаємо суму
7         return firstOperand + secondOperand;
8     }
9 
10     // Гарний коментар (пояснює "чому")
11     /**
12     * Ділить два цілих числа.
13     * Використовує тип 'double' для збереження точності
14     * навіть для цілочисельного ділення.
15     *
16     * @param a Ділене
17     * @param b Дільник
18     * @return Результат ділення
19     */
20     public double divide(int a, int b) {
21         // Уникаємо ArithmeticException, повертаючи 
22         // нескінченність, це стандартна поведінка
23         // для ділення double на 0. 
24         if (b == 0) {
25         return Double.POSITIVE_INFINITY;
26         }
27         return (double) a / b;
28     }
29 }
     
     3.2.7 Рекомендація 6. Використовуйте інструменти для перевірки стилю (Linters)
     Дотримуватися стилю вручну складно. Для цього існують спеціалізовані інструменти (лінтери), які аналізують код і вказують на невідповідності. Для Java найпопулярнішими є Checkstyle, PMD та SpotBugs (FindBugs).
     Checkstyle – найбільш відомий інструмент. Він перевіряє код на відповідність заданому набору правил (наприклад, Google Style Guide або власному) та дуже гнучкий у налаштуванні.
     PMD схожий на Checkstyle, але також шукає потенційні проблеми в коді («code smells»), наприклад, невикористані змінні, порожні блоки try-catch, занадто складні методи.
     SpotBugs фокусується не стільки на стилі, скільки на пошуку реальних помилок та вразливостей у коді (наприклад, NullPointerException).
     Ці інструменти інтегруються безпосередньо в IDE (IntelliJ IDEA, Eclipse) і підсвічують проблеми так само, як помилки компіляції.
     
     
     3.2.8 Рекомендація 7. Обробляйте помилки відповідно до стандартів Java
     Обробка помилок в Java реалізується через механізм Винятків (Exceptions) за допомогою блоків try-catch-finally. Важливо точно визначати типи виключень, використовувати власні класи виключень за необхідності та не ігнорувати помилки. Використання виключень дозволяє розділити «нормальний» хід виконання та «помилковий». Існують перевірювані (IOException, SQLException) і неперевірювані (NullPointerException, IllegalArgumentException) виключення. Ніколи не ігноруйте перехоплений виняток. Якщо ви перехоплюєте виключення, ви повинні або зареєструвати його (log), або обробити його (наприклад, встановити значення за замовчуванням чи вивести), або перекинути його далі, обернувши у власне виключення.
     Приклад неправильної та правильної обробки помилок:
     
1 // Поганий приклад (повернення коду помилки)
2 public int divide(int a, int b) {
3     if (b == 0) {
4         return -1; // -1 може бути валідним результатом
5     }
6     return a / b;
7 }
8 
9 // Поганий приклад (ігнорування винятку)
10 try {
11     int result = 10 / 0;
12 } catch (ArithmeticException e) {
13     // Порожній catch - "проковтнули" помилку, програма 
14     // продовжить працювати з непередбачуваним станом.
15 }
16 
17 // Гарний приклад (використання винятків)
18 public int divide(int a, int b) {
19     if (b == 0) {
20         // Чітко повідомляємо про проблему
21         throw new ArithmeticException("Division by zero is not allowed");
22     }
23     return a / b;
24 }
25 
26 // ... в іншому місці коду ...
27 try {
28     int result = divide(10, 0);
29 } catch (ArithmeticException e) {
30     // Обробляємо помилку: логуємо або показуємо користувачу
31     System.out.println("Error: " + e.getMessage());
32 }
     
     У поганому прикладі повертається код помилки у вигляді -1. У гарному прикладі – використовується виняток, який чітко повідомляє про проблему та обробляється помилка, яка показується користувачу.
     3.2.9 Рекомендація 8. Методи мають бути короткими і виконувати одну дію (SRP)
     Організація логіки всередині методів безпосередньо впливає на Підтримуваність коду (Maintainability). Занадто великі методи важко зрозуміти та протестувати. Краще розділяти методи на дрібніші, кожен з яких виконує одну чітку задачу. 
     Тому методи мають бути короткими, бажано не більше 15–20 рядків логіки (без врахування оголошення та закриваючої дужки). Довгі методи слід розділяти на менші, приватні, осмислено названі допоміжні методи. Це відповідає принципу SRP (Single Responsibility Principle) з SOLID. Полегшується повторне використання коду, так як маленькі методи можна викликати в інших місцях.
     Приклад до рекомендації:
     
1 // Поганий приклад (Довгий, робить кілька кроків)
2 public void processOrder(Order order) {
3     // 1. Валідація замовлення (5 рядків)
4     if (order.getItems().isEmpty()) { /* ... */ }
5     // 2. Обчислення загальної вартості (8 рядків)
6     double total = order.getItems().stream().mapToDouble(Item::getPrice).sum();
7     // 3. Знижки та податки (6 рядків)
8     total = applyDiscount(total, order.getCoupon());
9     // 4. Збереження до бази даних (3 рядки)
10     orderDAO.save(order);
11     // 5. Сповіщення клієнта (4 рядки)
12     notificationService.sendEmail(order);
13 }
14 
15 // Гарний приклад (Розділений на приватні методи)
16 public void processOrder(Order order) {
17     validateOrder(order);
18     double total = calculateTotal(order);
19     double finalTotal = applyTaxesAndDiscounts(total);
20     saveOrder(order);
21     notifyCustomer(order);
22 }
23 
24 // Приватні методи, які виконують конкретні завдання...
25 private void validateOrder(Order order) { /* ... */ }
26 private double calculateTotal(Order order) { /* ... */ }
27 private double applyTaxesAndDiscounts(double total) { /* ... */ }
28 private void saveOrder(Order order) { /* ... */ }
29 private void notifyCustomer(Order order) { /* ... */ }
     
     3.2.10 Рекомендація 9. Оптимізуйте продуктивність коду осмислено
     Оптимізація в Java має бути осмисленою і базуватися на профілюванні. Уникайте передчасної оптимізації, натомість зосередьтесь на виборі ефективних алгоритмів, правильному використанні колекцій та уникненні зайвих створень об’єктів.
     Приклад 1: Створення об'єктів у циклі:
     
1 // Поганий приклад:
2 // багаторазове створення об'єкта всередині циклу 
3 for (int i = 0; i < list.size(); i++) {
4     // String є immutable,
5     // тут створюється новий об'єкт на кожній ітерації 
6     String temp = new String(list.get(i));
7     // робота з temp
8 }
9 
10 // Гарний приклад: використання посилання
11 for (String item : list) {
12     // робота з item (новий об'єкт не створюється)
13 }

     Java має багатий набір структур даних у пакеті java.util, наприклад: 
• HashMap – найшвидший пошук за ключем (якщо не потрібен порядок);
• ArrayList – швидкий доступ за індексом, повільне видалення/вставка всередині;
• LinkedList – швидке видалення/вставка, повільний доступ за індексом;
• HashSet – найшвидша перевірка наявності унікального елемента.
     Поганий вибір може призвести до надмірного використання пам’яті або повільної роботи. Вибір правильної колекції може суттєво вплинути на продуктивність і простоту коду.
     Приклад 2: Вибір правильної колекції
     
1 // Поганий приклад: повільний пошук у списку
2 List<String> users = new ArrayList<>();
3 users.add("Alice");
4 users.add("Bob");
5 // Пошук users.contains("Alice") 
6 // вимагає перебору елементів (O(n))
7 if (users.contains("Alice")) {
8     System.out.println("Found");
9 }
10 
11 // Добрий приклад: швидкий пошук у множині
12 Set<String> users = new HashSet<>();
13 users.add("Alice");
14 users.add("Bob");
15 // Пошук users.contains("Alice") майже миттєвий (O(1))
16 if (users.contains("Alice")) {
17     System.out.println("Found");
18 }
     
     3.2.11 Рекомендація 10. Дотримуйтесь ключових принципів ООП
     Java є насамперед об'єктно-орієнтованою мовою, і використання її ключових принципів (інкапсуляція, успадкування, поліморфізм) відповідно до стандартів є критично важливим.
     3.2.11.1 Рекомендація 10.1. Дотримуйтесь інкапсуляції, роблячи поля класу приватними
     Принцип Інкапсуляції вимагає, щоб внутрішній стан об'єкта (поля/змінні) був прихований від прямого доступу ззовні. Використовуйте модифікатор доступу private для полів і надавайте доступ до них через публічні методи «гетери» (get...) та «сеттери» (set...).
     Приклад рекомендації про інкапсуляцію:
     
1 // Поганий приклад (Порушена інкапсуляція)
2 public class User {
3     // Поле публічне, можна змінити ззовні
4     public String name;     
5 }
6 
7 // Гарний приклад (Поле приватне, доступ через методи)
8 public class User {
9     private String name;
10 
11     public String getName() {
12         return name;
13     }
14 
15     public void setName(String newName) {
16         // Сеттер дозволяє додати логіку валідації
17         if (newName != null && !newName.trim().isEmpty()) {
18             this.name = newName;
19         }
20     }
21 }

     3.2.11.2 Рекомендація 10.2. Віддавайте перевагу композиції перед успадкуванням
     Хоча успадкування (extends) є основним принципом ООП, для спільного використання функціоналу між класами часто краще використовувати композицію, коли один клас має посилання на інший клас – «has-a» зв'язок. Надмірне успадкування створює жорстку ієрархію («is-a» зв'язок).
     Приклад використання успадкування та композиції:
     
1 // Поганий приклад (Жорстке успадкування)
2 // Логіка "Автомобіль 'є' Двигун" - неправильна.
3 public class Car extends Engine {
4     // ...
5 }
6 
7 // Гарний приклад (Композиція)
8 public class Engine {
9     public void start() { /* ... */ }
10 }
11 
12 public class Car {
13     // Композиція: Car "має" Engine
14     private final Engine engine;
15 
16     public Car(Engine engine) {
17         this.engine = engine;
18     }
19 
20     public void start() {
21         engine.start(); // Делегування
22     }
23 }

     3.2.12 Рекомендація 11. Документуйте код із використанням Javadoc
     Якісний код – це не тільки чистий код, але й той, який можна легко підтримувати і довіряти йому. Тому документуйте код із використанням Javadoc.
     Javadoc – це стандартний інструмент Java для створення документації з коментарів у коді. Javadoc-коментар повинен пояснювати ЩО робить елемент, а не ЯК (логіка "як" має бути очевидною з коду). Використання Javadoc-позначок (наприклад, @param, @return, @throws) допомагає створити детальну, зручну для читання документацію API, що полегшує використання класів і методів іншими розробниками. Без документації інші розробники змушені витрачати час на вивчення реалізації кожного методу, щоб зрозуміти його призначення, що сильно уповільнює розробку та інтеграцію.
     Приклад правильної документації коду:
     
1 /**
2 * Клас, що представляє працівника.
3 * Містить інформацію про ім'я та зарплатню.
4 */
5 public class Employee {
6 
7     private String name;
8 
9     /**
10     * Повертає повне ім'я працівника.
11     *
12     * @return рядок, що містить ім'я працівника
13     */
14     public String getName() {
15         return name;
16     }
17 
18     /**
19     * Встановлює ім'я працівника.
20     *
21     * @param name ім'я для встановлення (не може бути null)
22     * @throws IllegalArgumentException якщо ім'я null
23     */
24     public void setName(String name) {
25         if (name == null) {
26             throw new IllegalArgumentException("Name cannot be null");
27         }
28         this.name = name;
29     }
30 }

     3.2.13 Рекомендація 12. Пишіть тести для перевірки функціональності (Unit Testing)
     Кожен клас, що містить важливу бізнес-логіку, повинен мати відповідний юніт-тест. У Java для цього найчастіше використовують бібліотеку JUnit. Тести перевіряють очікувану поведінку, а також граничні випадки та обробку помилок. Це основа Test-Driven Development (TDD), де тести пишуться до коду.
     Приклад написання тесту:
     
1 // Клас для тестування (продукт)
2 public class Calculator {
3     public int add(int a, int b) {
4         return a + b;
5     }
6 
7     public int divide(int a, int b) {
8         if (b == 0) {
9             throw new ArithmeticException("Division by zero");
10         }
11         return a / b;
12     }
13 }
14 
15 // Юніт-тест (зазвичай в окремій папці src/test/java)
16 import org.junit.jupiter.api.Test;
17 import static org.junit.jupiter.api.Assertions.assertEquals;
18 import static org.junit.jupiter.api.Assertions.assertThrows;
19 
20 public class CalculatorTest {
21 
22     @Test
23     void testAdditionPositiveNumbers() {
24         Calculator calc = new Calculator();
25         // Перевіряємо, що 2 + 3 = 5
26         assertEquals(5, calc.add(2, 3), "Додавання двох позитивних чисел не працює.");
27     }
28 
29     @Test
30     void testAdditionNegativeNumbers() {
31         Calculator calc = new Calculator();
32         assertEquals(-5, calc.add(-2, -3));
33     }
34 
35     @Test
36     void testDivisionByZero() {
37         Calculator calc = new Calculator();
38         // Перевіряємо, що ділення на нуль 
39         // кидає очікуваний виняток
40         assertThrows(ArithmeticException.class, () -> {
41             calc.divide(10, 0);
42         });
43     }
44 }

     3.2.14 Рекомендація 13. Використовуйте сучасні можливості мови (Java 8+)
     Використання застарілих підходів веде до більш громіздкого і менш ефективного коду. Тому використовуйте сучасні можливості мови.
     Сучасні версії Java (з Java 8 і далі) пропонують потужні інструменти, зокрема Лямбда-вирази та Stream API, які сприяють більш чистому та декларативному коду. Замість громіздких циклів та анонімних класів, використовуйте функціональний підхід.
     Приклад (фільтрація списку):
     
1 List<String> names = Arrays.asList("Anna", "Bob", "Cindy", "Alex");
2 
3 // Поганий приклад (класичний цикл)
4 List<String> namesWithA = new ArrayList<>();
5 for (String name : names) {
6     if (name.startsWith("A")) {
7         namesWithA.add(name);
8     }
9 }
10 System.out.println(namesWithA); // [Anna, Alex]
11 
12 // Гарний приклад (Stream API)
13 List<String> namesWithA_Stream = names.stream()
14     .filter(name -> name.startsWith("A"))
15     .collect(Collectors.toList());
16 
17 System.out.println(namesWithA_Stream); // [Anna, Alex]

     3.2.15 Рекомендація 14. Один клас – один файл, чітка структура пакетів
     У Java прийнято, що кожен публічний клас зберігається у власному файлі з таким самим іменем, як клас. Пакети організовують код за функціональними модулями чи логічними рівнями (наприклад, controller, service, repository). Це допомагає легко знаходити потрібний код у великому проєкті.
     3.2.16 Рекомендація 15. Використовуйте інструменти та автоматизацію якості коду
     Дотримання стилю та якості коду не повинно бути ручною роботою. Цей процес автоматизується на рівні проєкту.
     Статичний аналіз проводиться за допомогою SonarQube або SonarLint прямо в IDE. Це не просто лінтер, а ціла платформа для аналізу якості коду. Він аналізує Java-код на «запахи коду» (code smells), вразливості безпеки та потенційні баги, а також дає загальну оцінку «здоров'я» проєкту.
     Автоматизація забезпечується за допомогою Git Hooks, CI/CD.
     Git Hooks – це скрипти, які автоматично запускаються перед подіями Git. Наприклад, pre-commit хук може автоматично запустити Checkstyle і не дозволити вам «закомітити» код, якщо він не проходить перевірку стилю.
     CI/CD (Continuous Integration) – це такі системи, як Jenkins, GitLab CI або GitHub Actions, які автоматично збирають проєкт та проганяють усі перевірки (компіляція, JUnit тести, Checkstyle, SonarQube) кожного разу, коли хтось надсилає новий код. Якщо хоч одна перевірка падає, злиття коду блокується.
     3.2.17 Висновки
     Якісні Java Code Conventions допомагають робити код читабельним і зрозумілим, спрощувати командну розробку, зменшувати кількість помилок і спрощувати тестування, забезпечувати масштабованість і підтримку проєкту у майбутньому. Гарний стиль і дотримання правил не лише роблять програму «красивою», але й напряму впливають на її надійність, зрозумілість і продуктивність. Інвестування часу у вивчення та застосування Code Conventions у Java – це пряма інвестиція в довговічність, якість і успіх будь-якого проєкту. Якісний код – це код, написаний для людей, які будуть його читати, а не лише для компілятора.


4 ВИСНОВКИ
     У ході виконання цієї роботи було досліджено ключові рекомендації щодо написання якісного програмного коду, сфокусувавшись на мові Java.
     Було отримано практичні навички аналізу коду, оскільки кожна рекомендація розглядалася через порівняння «поганих» та «гарних» прикладів. Це дозволило не просто вивчити правила, а й зрозуміти, як саме вони впливають на читабельність, ефективність та підтримуваність програм.
     В результаті було здобуто глибше розуміння принципів рефакторингу та важливості дотримання єдиних стандартів кодування. Було усвідомлено, що чистий та організований код є критично важливим для успішної командної розробки та довгострокової підтримки будь-якого проєкту.


5 ВИКОРИСТАНІ ДЖЕРЕЛА
     1. Блох, Дж. Effective Java. — 3rd ed. — Boston : Addison-Wesley, 2018. — 416 с.
     2. Code Conventions for the Java Programming Language [Електронний ресурс]. — Oracle, 1999. — Режим доступу: https://www.oracle.com/java/technologies/javase/codeconventions-contents.html (дата звернення: 21.10.2025).
     3. Baeldung. Java Clean Code [Електронний ресурс]. — Режим доступу: https://www.baeldung.com/java-clean-code (дата звернення: 21.10.2025).
     4. Hyperskill. Java Coding Style Conventions [Електронний ресурс]. — JetBrains Academy, 2023. — Режим доступу: https://hyperskill.org/university/java/java-coding-style-conventions (дата звернення: 21.10.2025).
     5. Google Java Style Guide [Електронний ресурс]. — Google, 2024. — Режим доступу: https://google.github.io/styleguide/javaguide.html (дата звернення: 21.10.2025).
     6. Checkstyle. A Development Tool to Help You Write Java Code that Adheres to a Coding Standard [Електронний ресурс]. — Режим доступу: https://checkstyle.org/ (дата звернення: 01.10.2025).
     7. PMD. An Extensible Cross-language Static Code Analyzer [Електронний ресурс]. — Режим доступу: https://pmd.github.io/ (дата звернення: 21.10.2025).
     8. SonarSource. SonarQube – Continuous Code Quality [Електронний ресурс]. — Режим доступу: https://www.sonarsource.com/products/sonarqube/ (дата звернення: 21.10.2025).
     9. JUnit 5 User Guide [Електронний ресурс]. — JUnit Documentation, 2025. — Режим доступу: https://docs.junit.org/current/user-guide/ (дата звернення: 21.10.2025).
ДОДАТОК А
Відеозапис
     Відеозапис доповіді: https://youtu.be/A_hN5h8Q-zs
     Хронологічний опис відеозапису:
00:00 - Тема доповіді та вступне слово 
00:14 - Вступ 
00:51 - Рекомендація 1: Використовуйте осмислені назви 
01:15 - Рекомендація 2: Дотримуйтеся правил найменування (Naming Conventions) 
02:15 - Рекомендація 3: Використовуйте узгоджене форматування (Відступи, Дужки) 
03:02 - Рекомендація 4: Специфічні (альтернативні) конвенції: Oracle vs. Google 
03:52 - Рекомендація 5: Використовуйте коментарі помірно і змістовно 
04:31 - Рекомендація 6: Інструменти для перевірки стилю (Linters: Checkstyle, PMD, SpotBugs) 
05:09 - Рекомендація 7: Обробляйте помилки відповідно до стандартів Java 
05:48 - Рекомендація 8: Методи мають бути короткими (Принцип SRP) 
06:19 - Рекомендація 9: Оптимізуйте продуктивність коду осмислено 
07:19 - Рекомендація 10: Дотримуйтесь ключових принципів ООП 
07:46 - Рекомендація 11: Документуйте код із використанням Javadoc 
08:19 - Рекомендація 12: Пишіть тести для перевірки (Unit Testing) 
08:48 - Рекомендація 13: Використовуйте сучасні можливості мови (Java 8+) 
09:22 - Рекомендація 14: Структура проєкту (Один клас – один файл) 
10:00 - Рекомендація 15: Інструменти автоматизації та якості коду (SonarQube, Git Hooks) 
10:44 - Висновки 
11:21 - Дякую за увагу та список використаних джерел


ДОДАТОК Б
Слайди презентації

Рисунок Б.1 – Титульний слайд


Рисунок Б.2 – Вступ


Рисунок Б.3 – Ознаки якісного коду у Java


Рисунок Б.4 – Рекомендація 1 (Використовуйте осмислені назви змінних, методів та класів)


Рисунок Б.5 – Рекомендація 2 (Дотримуйтеся правил найменування за Java Naming Conventions)


Рисунок Б.6 – Рекомендація 3 (Використовуйте узгоджене форматування)

Рисунок Б.7 – Рекомендація 4 (Розумійте специфічні (альтернативні) конвенції)


Рисунок Б.8 – Рекомендація 5 (Використовуйте коментарі помірно і змістовно)


Рисунок Б.9 – Рекомендація 6 (Використовуйте інструменти для перевірки стилю (Linters))


Рисунок Б.10 – Рекомендація 7 (Обробляйте помилки відповідно до стандартів Java)


Рисунок Б.11 – Рекомендація 8 (Методи мають бути короткими і виконувати одну дію (SRP))


Рисунок Б.12 – Рекомендація 9 (Оптимізуйте продуктивність коду осмислено)


Рисунок Б.13 – Рекомендація 9 (Приклад 2: Вибір правильної колекції )


Рисунок Б.14 – Рекомендація 10 (Дотримуйтесь ключових принципів ООП)


Рисунок Б.15 – Рекомендація 11 (Документуйте код із використанням Javadoc)


Рисунок Б.16 – Рекомендація 12 (Пишіть тести для перевірки функціональності (Unit Testing))


Рисунок Б.17 – Рекомендація 12 (Використовуйте сучасні можливості мови (Java 8+))


Рисунок Б.18 – Рекомендація 14 (Один клас – один файл, чітка структура пакетів)


Рисунок Б.19 – Рекомендація 15 (Використовуйте інструменти та автоматизацію якості коду)


Рисунок Б.20 – Висновки


Рисунок Б.21 – Список використаних джерел


ДОДАТОК В
Програмний код
     GitHub репозиторій: https://github.com/NureNikitinaOleksandra/ark-pzpi-23-9-nikitina-oleksandra/blob/main/Pract1/pzpi-23-9-nikitina-oleksandra-pract1/code-examples-code-conventions.java
2


